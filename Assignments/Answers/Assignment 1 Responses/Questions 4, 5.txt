4.  A compiled language is technically run in a smaller amount of steps due to it directly translating the language into machine code, meaning it will run faster than an interpreted language and consume less processing real-estate, but it also means it is less flexible or user friendly. An interpreted language has a middle man of sorts that allows for on the fly alterations and easier debugging, but will run slower due to needing to then translate the user-friendly language into machine code.

	Their uses may vary, but generally, for a simple process that won't need to be changed very often, it would be more useful to use a compiled language. If there is a more complex script that may require many moving parts or multiple users to work on, an interpreted language would help to catch mistakes early on and to support a non-destructive workflow.  


5. All three codes are in fact the same, or if not, contain the same inherent code. Source code is written using a human-readable language and is the direct set of instructions given to fulfill a function or process. Assembly code is the lowest level of program description possible before reaching machine code. The Assembly code will inform the machine code, which is the actual code that the machine is able to read and understand (bytes and bits of 1's and 0's), and explain to the machine in which direction goes which set of data into whatever stored memory may be required. 